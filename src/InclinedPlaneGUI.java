//Inclined simulation GUI
//By: Neien Wei
// Hope you enjoy!!!

//import packages
import java.awt.*;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;

public class InclinedPlaneGUI extends javax.swing.JFrame implements Runnable{ //implementing runnable allows me get pause and resume working
                                                                              //by using threads
    //global variables in this class
    double grav; //g constant
    double acceleration = 0, velocity = 0, displacement = 0; //acceleration, velocity, displacement
    DecimalFormat df = new DecimalFormat("0.00"); //decimal format object to format any output to 2 decimal places
    Ramp r; //ramp object
    Box b; //box object
    long startTime, endTime; //the starting seconds and ending seconds
    double trackedTime = 0; //tracked time when the user clicks pause
    double seconds; //number of seconds passed in the animation
    boolean drawfbd, drawfnet; //true/false conditions for whether to draw fbd or fnet on the drawPanel
    double scaleToGrid; //value that gets the displacement value of box up to scale so the box can update position properly
   
    //just initializing forces, will change the fields later in the updateForces method
    Forces fg = new Forces("Fg", 3*Math.PI/2, 10); //gravity force
    Forces fn = new Forces("Fn", 1, 1); //normal force
    Forces fgPerp = new Forces("Fg\u27C2", 1, 1); //component of gravity force perpendicular to the incline
    Forces fgPar = new Forces("Fg||", 1, 1); //component of gravity force parallel to the incline
    Forces ff = new Forces("Ff", 1, 1); //friction force
    Forces[] fbd = {fg, fgPerp, ff, fgPar, fn}; //forces in the free body diagram array
    
    Forces fnet = new Forces("Fnet", 1, 1); //net force
    
    Thread animator; //thread for animation
    
    
    /**
     * Creates new form InclinedPlaneGUI
     */
    //set initial components of gui
    public InclinedPlaneGUI() {
        initComponents();
        scaleToGrid = drawPanel.getWidth()/10;
        pauseButton.setEnabled(false);
        resetButton.setEnabled(false);
        grav = Double.parseDouble(gInput.getText());
        
        r = new Ramp(Math.toRadians(Double.parseDouble(angleInput.getText())), Double.parseDouble(uInput.getText()), 
                Double.parseDouble(lengthInput.getText()), drawPanel.getWidth(), drawPanel.getHeight(), scaleToGrid); 
        
        b = new Box(Math.toRadians(Double.parseDouble(angleInput.getText())), Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        
        updateForces(r.theta, r.u, b.mass, grav);
        updatePositionSlider();
        
    }
    
    //sleep method
    private void sleep(int i){
        try {
            Thread.sleep(i);
        } catch (Exception e) {}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        forceButtons = new javax.swing.ButtonGroup();
        drawPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        lengthSlider = new javax.swing.JSlider();
        startButton = new javax.swing.JButton();
        lengthInput = new javax.swing.JTextField();
        fbdButton = new javax.swing.JRadioButton();
        lengthLabel = new javax.swing.JLabel();
        fnetButton = new javax.swing.JRadioButton();
        angleLabel = new javax.swing.JLabel();
        clearForcesButton = new javax.swing.JRadioButton();
        angleInput = new javax.swing.JTextField();
        mLabel = new javax.swing.JLabel();
        angleSlider = new javax.swing.JSlider();
        mInput = new javax.swing.JTextField();
        uLabel = new javax.swing.JLabel();
        mSlider = new javax.swing.JSlider();
        resetButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        gLabel = new javax.swing.JLabel();
        gInput = new javax.swing.JTextField();
        gSlider = new javax.swing.JSlider();
        uInput = new javax.swing.JTextField();
        positionSlider = new javax.swing.JSlider();
        uSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        title1 = new javax.swing.JLabel();
        infoPanel = new javax.swing.JTabbedPane();
        forcePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fgOutput = new javax.swing.JLabel();
        fgPerpOutput = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fgParOutput = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fnOutput = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ffOutput = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fnetOutput = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        motionPanel = new javax.swing.JPanel();
        accelerationLabel = new javax.swing.JLabel();
        velocityLabel = new javax.swing.JLabel();
        displacementLabel = new javax.swing.JLabel();
        vOutput = new javax.swing.JLabel();
        aOutput = new javax.swing.JLabel();
        dOutput = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        drawPanel.setBackground(new java.awt.Color(255, 255, 255));
        drawPanel.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        getContentPane().add(drawPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        title.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        title.setText("Playing with Inclines!");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, -1, -1));

        lengthSlider.setMaximum(90);
        lengthSlider.setMinimum(30);
        lengthSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lengthSliderMouseReleased(evt);
            }
        });
        getContentPane().add(lengthSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 150, 165, -1));

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(631, 358, -1, -1));

        lengthInput.setText("5");
        lengthInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lengthInputFocusLost(evt);
            }
        });
        getContentPane().add(lengthInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 147, 50, -1));

        forceButtons.add(fbdButton);
        fbdButton.setText("FBD");
        fbdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbdButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fbdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 323, -1, -1));

        lengthLabel.setText("Ramp length (m):");
        getContentPane().add(lengthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 152, -1, -1));

        forceButtons.add(fnetButton);
        fnetButton.setText("Net Force");
        fnetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fnetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 323, -1, -1));

        angleLabel.setText("Ramp angle (degrees):");
        getContentPane().add(angleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(558, 108, -1, -1));

        forceButtons.add(clearForcesButton);
        clearForcesButton.setSelected(true);
        clearForcesButton.setText("Clear");
        clearForcesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearForcesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearForcesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(825, 323, -1, -1));

        angleInput.setText("30");
        angleInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                angleInputFocusLost(evt);
            }
        });
        getContentPane().add(angleInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 103, 50, -1));

        mLabel.setText("Object mass (Kg):");
        getContentPane().add(mLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 237, -1, -1));

        angleSlider.setMaximum(70);
        angleSlider.setMinimum(5);
        angleSlider.setValue(30);
        angleSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                angleSliderMouseReleased(evt);
            }
        });
        getContentPane().add(angleSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 110, 165, -1));

        mInput.setText("2.5");
        mInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mInputFocusLost(evt);
            }
        });
        getContentPane().add(mInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 232, 50, -1));

        uLabel.setText("u:");
        getContentPane().add(uLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(684, 196, -1, -1));

        mSlider.setMaximum(500);
        mSlider.setMinimum(10);
        mSlider.setValue(250);
        mSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mSliderMouseReleased(evt);
            }
        });
        getContentPane().add(mSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 230, 165, -1));

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(811, 358, -1, -1));

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(pauseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(711, 358, -1, -1));

        gLabel.setText("g constant:");
        getContentPane().add(gLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, -1, -1));

        gInput.setText("9.8");
        gInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gInputFocusLost(evt);
            }
        });
        getContentPane().add(gInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 50, -1));

        gSlider.setMaximum(200);
        gSlider.setMinimum(30);
        gSlider.setValue(98);
        gSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                gSliderMouseReleased(evt);
            }
        });
        getContentPane().add(gSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 70, 165, -1));

        uInput.setText("0.5");
        uInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uInputFocusLost(evt);
            }
        });
        getContentPane().add(uInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 185, 50, -1));

        positionSlider.setValue(0);
        positionSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                positionSliderMouseDragged(evt);
            }
        });
        getContentPane().add(positionSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, -1, -1));

        uSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                uSliderMouseReleased(evt);
            }
        });
        getContentPane().add(uSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 190, 165, -1));

        jLabel1.setText("Position of object:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 279, -1, -1));

        title1.setFont(new java.awt.Font("Garamond", 1, 14)); // NOI18N
        title1.setText("Information Panel:");
        getContentPane().add(title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(558, 393, -1, -1));

        jLabel2.setText("Fg:");

        jLabel3.setText("Fg⊥:");

        jLabel4.setText("Fg||:");

        jLabel5.setText("Fn:");

        jLabel6.setText("Ff:");

        jLabel7.setText("Fnet:");

        javax.swing.GroupLayout forcePanelLayout = new javax.swing.GroupLayout(forcePanel);
        forcePanel.setLayout(forcePanelLayout);
        forcePanelLayout.setHorizontalGroup(
            forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, forcePanelLayout.createSequentialGroup()
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, forcePanelLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fnetOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(forcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ffOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fgParOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fgOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, forcePanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fgPerpOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(39, 39, 39))
        );
        forcePanelLayout.setVerticalGroup(
            forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(forcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(fgPerpOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(fgOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(fgParOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(fnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ffOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(forcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fnetOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        infoPanel.addTab("Forces", forcePanel);

        accelerationLabel.setText("Acceleration:");

        velocityLabel.setText("Velocity:");

        displacementLabel.setText("Displacement:");

        javax.swing.GroupLayout motionPanelLayout = new javax.swing.GroupLayout(motionPanel);
        motionPanel.setLayout(motionPanelLayout);
        motionPanelLayout.setHorizontalGroup(
            motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displacementLabel)
                    .addComponent(accelerationLabel)
                    .addComponent(velocityLabel))
                .addGap(71, 71, 71)
                .addGroup(motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        motionPanelLayout.setVerticalGroup(
            motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(motionPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(accelerationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(velocityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(motionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displacementLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        infoPanel.addTab("Acceleration, Velocity, Displacement", motionPanel);

        getContentPane().add(infoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(558, 416, -1, -1));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel9.setText("3");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 80, -1, -1));

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel10.setText("5");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, -1, -1));

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel11.setText("3");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 160, -1, -1));

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel12.setText("0");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 200, -1, -1));

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel13.setText("0.1");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 240, -1, -1));

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("20");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 80, -1, -1));

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel15.setText("70");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 120, -1, -1));

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel16.setText("9");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 160, -1, -1));

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel17.setText("1");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 200, -1, -1));

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel18.setText("5");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 240, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //gSlider actions when user adjusts
    private void gSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gSliderMouseReleased
        //change the g constant, gTextfield, update forces
        grav = (double)gSlider.getValue()/10;
        gInput.setText(Double.toString(grav));
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_gSliderMouseReleased

    //actions regarding to the g constant textfield
    private void gInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gInputFocusLost
        //avoid any error inputs
        try{
            //change the g constant, gSlider
            //puts a g limit if user enters too big of a g value
            if (Double.parseDouble(gInput.getText())*10 > gSlider.getMaximum()) {
                grav = (double)gSlider.getMaximum()/10;
                gSlider.setValue(gSlider.getMaximum());
                gInput.setText("20.0");
            }
            
            //puts a g limit if user enters too small of a g value
            else if (Double.parseDouble(gInput.getText())*10 < gSlider.getMinimum()) {
                grav = (double)gSlider.getMinimum()/10;
                gSlider.setValue(gSlider.getMinimum());
                gInput.setText("3.0");
            }
            
            //the g constant is between the max&min limits
            else {
                grav = Double.parseDouble(gInput.getText());
                gSlider.setValue((int)(Double.parseDouble(gInput.getText())*10));
            }
        }
        
        //set minimum value if user enters something wrong
        catch(Exception E){
            grav = (double)gSlider.getMinimum()/10;
            gSlider.setValue(gSlider.getMinimum());
            gInput.setText("3.0");
            
        }
        
        //updates forces and draws box and ramp
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_gInputFocusLost

    //updates the max limit of position slider when user changes ramp angle and length
    public void updatePositionSlider(){
        positionSlider.setMaximum((int)Math.round(r.length-b.size));
        positionSlider.setValue(positionSlider.getMinimum());
    }
    
    //actions regarding to angleSlider
    private void angleSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_angleSliderMouseReleased
        //change the angle, angleTextfield, update forces, position slider
        r.update(Math.toRadians(angleSlider.getValue()), "angle");
        b = new Box(r.theta, Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        angleInput.setText(Integer.toString(angleSlider.getValue()));
        
        updateForces(r.theta, r.u, b.mass, grav);
        updatePositionSlider();
        drawRampAndBox();
    }//GEN-LAST:event_angleSliderMouseReleased

    //actions regarding angle textfield
    private void angleInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_angleInputFocusLost
        //avoid any error inputs
        try{
            //change the angle, angleSlider
            //puts an angle limit if user enters too big of an angle value
            if (Double.parseDouble(angleInput.getText()) > angleSlider.getMaximum()) {
                r.update(Math.toRadians(angleSlider.getMaximum()), "angle");
                angleSlider.setValue(angleSlider.getMaximum());
                angleInput.setText(Integer.toString(angleSlider.getMaximum()));
            }
            
            //puts an angle limit if user enters too small of an angle value
            else if (Double.parseDouble(angleInput.getText()) < angleSlider.getMinimum()) {
                r.update(Math.toRadians(angleSlider.getMinimum()), "angle");
                angleSlider.setValue(angleSlider.getMinimum());
                angleInput.setText(Integer.toString(angleSlider.getMinimum()));
            }
            
            //angle is between max&min
            else {
                r.update(Math.toRadians(Double.parseDouble(angleInput.getText())), "angle");
                angleSlider.setValue((int)(Double.parseDouble(angleInput.getText())));
            }
        }
        //set minimum value if user enters something wrong
        catch(Exception E){
            r.update(Math.toRadians(angleSlider.getMinimum()), "angle");
            angleSlider.setValue(angleSlider.getMinimum());
            angleInput.setText(Integer.toString(angleSlider.getMinimum()));  
        }
        //updates forces, position slider and draws box and ramp
        b = new Box(r.theta, Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        updateForces(r.theta, r.u, b.mass, grav);
        updatePositionSlider();
        drawRampAndBox();
    }//GEN-LAST:event_angleInputFocusLost

    //actions of length slider
    private void lengthSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lengthSliderMouseReleased
        //updates length textfield from the value of slider, as well as the length of ramp and position slider
        //no need to update forces since the ramp doesn't get taller
        r.update((double)lengthSlider.getValue()/10, "len");
        b = new Box(r.theta, Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        lengthInput.setText(Double.toString((double)lengthSlider.getValue()/10));
        updatePositionSlider();
        drawRampAndBox();
    }//GEN-LAST:event_lengthSliderMouseReleased

    //actions of length textfield
    private void lengthInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lengthInputFocusLost
        //avoid any error inputs
        try{
            //change the length, lengthslider, position slider
            //puts a length limit if user enters too big of a length value
            if (Double.parseDouble(lengthInput.getText())*10 > lengthSlider.getMaximum()) {
                r.update((double)lengthSlider.getMaximum()/10, "len");
                lengthSlider.setValue(lengthSlider.getMaximum());
                lengthInput.setText("9.0");
            }
            
            //puts a length limit if user enters too small of a length value
            else if (Double.parseDouble(lengthInput.getText())*10 < lengthSlider.getMinimum()) {
                r.update((double)lengthSlider.getMinimum()/10, "len");
                lengthSlider.setValue(lengthSlider.getMinimum());
                lengthInput.setText("3.0");
            }
            
            //length is between max&min
            else {
                r.update(Double.parseDouble(lengthInput.getText()), "len");
                lengthSlider.setValue((int)(Double.parseDouble(lengthInput.getText())*10 ));
            }
        }
        
        //set minimum value if user enters something wrong
        catch(Exception E){
            r.update((double)lengthSlider.getMinimum()/10, "len");
            lengthSlider.setValue(lengthSlider.getMinimum());
            lengthInput.setText("3.0");
        }
        //updates position slider and draws updated box and ramp
        b = new Box(r.theta, Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        updatePositionSlider();
        drawRampAndBox();
    }//GEN-LAST:event_lengthInputFocusLost

    //action of friction coefficient slider
    private void uSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uSliderMouseReleased
        //change u, uTextfield, update forces
        r.u = (double)uSlider.getValue() / 100;
        uInput.setText(Double.toString(r.u));
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_uSliderMouseReleased

    //action of friction coefficient textfield
    private void uInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uInputFocusLost
        //avoid any error inputs
        try{
            //change u, uslider
            //puts a u limit if user enters too big of a u value
            if (Double.parseDouble(uInput.getText())*100 > uSlider.getMaximum()) {
                r.u = (double)uSlider.getMaximum()/100;
                uSlider.setValue(uSlider.getMaximum());
                uInput.setText("1.0");
            }
            
            //puts a u limit if user enters too big of a u value
            else if (Double.parseDouble(uInput.getText())*100 < uSlider.getMinimum()) {
                r.u = (double)uSlider.getMinimum()/100;
                uSlider.setValue(uSlider.getMinimum());
                uInput.setText("0.0");
            }
            
            //u is between max & min
            else {
                r.u = Double.parseDouble(uInput.getText());
                uSlider.setValue((int)(Double.parseDouble(uInput.getText())*100 ));
            }        
        }
        //set minimum value if user enters something wrong
        catch(Exception E){
        r.u = (double)uSlider.getMinimum()/100;
            uSlider.setValue(uSlider.getMinimum());
            uInput.setText("0.0");
        }
        //updates forces and draws box and ramp
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_uInputFocusLost

    //actions of the start button
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        //update the initial xy position of box
        b.xInit = r.xPos[2] + positionSlider.getValue();
        b.yInit = r.yPos[2] + positionSlider.getValue()*Math.tan(r.theta);
        
        //start animator thread and the time
        animator = new Thread(this);   
        animator.start();
        startTime = System.currentTimeMillis();
        
        //enabling/disabling input fields and buttons
        startButton.setEnabled(false);
        pauseButton.setEnabled(true);
        resetButton.setEnabled(true);
        enableInputFields(false);
        
    }//GEN-LAST:event_startButtonActionPerformed

    /****FBD, fnet, and the clear radio buttons are all in one button group****/
    
    //action of fbd radio button
    private void fbdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbdButtonActionPerformed
        //sets the condition of drawing net force to false and free body diagram to true
        drawfbd = true;
        drawfnet = false;
        drawRampAndBox();
    }//GEN-LAST:event_fbdButtonActionPerformed

    //action of fnet radio button
    private void fnetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnetButtonActionPerformed
        //sets the condition of drawing net force to true and free body diagram to false
        drawfbd = false;
        drawfnet = true;
        drawRampAndBox();
    }//GEN-LAST:event_fnetButtonActionPerformed

    //action of clear radio button
    private void clearForcesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearForcesButtonActionPerformed
        //sets fnet and fbd to false so dramRampAndBox() won't draw those components
        drawfbd = false;
        drawfnet = false;
        drawRampAndBox();
    }//GEN-LAST:event_clearForcesButtonActionPerformed

    //action of mass textField
    private void mInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mInputFocusLost
        //avoid any error inputs
        try{
            //change box mass, massslider, update forces
            //puts a mass limit if user enters too big of a mass value
            if (Double.parseDouble(mInput.getText())*100 > mSlider.getMaximum()) {
                b.mass = (double)mSlider.getMaximum()/100;
                mSlider.setValue(mSlider.getMaximum());
                mInput.setText("5.0");
            }
            
            //puts a mass limit if user enters too small of a mass value
            else if (Double.parseDouble(mInput.getText())*100 < mSlider.getMinimum()) {
                b.mass = (double)mSlider.getMinimum()/100;
                mSlider.setValue(mSlider.getMinimum());
                mInput.setText("0.1");
            }
            
            //mass value is between max&min
            else {
                b.mass = Double.parseDouble(mInput.getText());
                mSlider.setValue((int)(Double.parseDouble(mInput.getText())*100 ));
            }
        }
        //set minimum value if user enters something wrong
        catch(Exception E){
            b.mass = (double)mSlider.getMinimum()/100;
            mSlider.setValue(mSlider.getMinimum());
            mInput.setText("0.1");
        }
        //updates forces and draws ramp and box
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_mInputFocusLost

    //actions of mass slider
    private void mSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mSliderMouseReleased
        //change mass value and updates mass textfield, forces
        b.mass = (double)mSlider.getValue() / 100;
        mInput.setText(Double.toString(b.mass));
        updateForces(r.theta, r.u, b.mass, grav);
        drawRampAndBox();
    }//GEN-LAST:event_mSliderMouseReleased

    //action of the pause button
    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        
        if ( animator == null ) { //if the animation is currently paused, starts animation from where it left off
            startTime = System.currentTimeMillis(); //starts the timer again
            animator = new Thread( this ); //restarts the Thread object that keeps the animation loop going in the run() method below
            animator.start();
            pauseButton.setText( "Pause" );
        }
        
        else {  //if the animation is currently running, pause the animation
            animator = null; //kills the Thread object, which interrupts the animation loop in the run() method below
            trackedTime = seconds; //tracks the amount of seconds passed before user pauses it
            pauseButton.setText( "Resume" );
        } 
    }//GEN-LAST:event_pauseButtonActionPerformed

    //actions of the reset button
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        //enable/disable the buttons, input fields back to original and kill the thread object
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        resetButton.setEnabled(false);
        enableInputFields(true);
        animator = null;
        pauseButton.setText( "Pause" );

        //reset time and tracked time to 0 seconds
        seconds = 0;
        trackedTime = 0;
        
        //resets the box's position to where the position slider was at
        b = new Box(Math.toRadians(Double.parseDouble(angleInput.getText())), Double.parseDouble(mInput.getText()), r.xPos[2], r.yPos[2]);
        b.update(positionSlider.getValue());
        drawRampAndBox();
        
        aOutput.setText("");
        vOutput.setText("");
        dOutput.setText("");
        
        
    }//GEN-LAST:event_resetButtonActionPerformed

    //action of the box position slider
    private void positionSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positionSliderMouseDragged
        //calculate box's position according to the position slider
        b.update(positionSlider.getValue());
        drawRampAndBox();    
    }//GEN-LAST:event_positionSliderMouseDragged

    //either enables/disables all (except the radio buttons) the input fields of this gui
    public void enableInputFields(boolean b){
        gInput.setEnabled(b);
        gSlider.setEnabled(b);
        
        angleInput.setEnabled(b);
        angleSlider.setEnabled(b);
        
        lengthInput.setEnabled(b);
        lengthSlider.setEnabled(b);
        
        uInput.setEnabled(b);
        uSlider.setEnabled(b);
        
        mInput.setEnabled(b);
        mSlider.setEnabled(b);

        positionSlider.setEnabled(b);
    }
    
    //draws ramp and box with any selected force vectors with a buffered image
    public void drawRampAndBox() {
        Graphics g = drawPanel.getGraphics();
        Image img = getImage();
        g.drawImage(img, 0, 0, rootPane);
        
    }
    
    //returns the calculated image of the ramp, box, and forces vector position
    public Image getImage(){
        BufferedImage bi = new BufferedImage(drawPanel.getWidth(), drawPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = (Graphics2D) bi.getGraphics();
        
        //draws ramp and box position with time elapsed at top right
        r.draw(g2);
        b.draw(g2);
        g2.drawString(df.format(seconds) + "s", drawPanel.getWidth()-50, 50);
        
        //draws fbd if user wants fbd displayed
        if (drawfbd) {
            g2.setColor(Color.blue);
            for (int i = 0; i < fbd.length; i++) {
                fbd[i].draw((int)b.xCenter, (int)b.yCenter, g2);  
            }   
        }
        
        //draws fnet if user wants net force displayed
        else if (drawfnet) {
            fnet.draw((int)b.xCenter, (int)b.yCenter, g2);
        }
        
        return bi;
    }
    
    //update forces based on what the user changes
    public void updateForces(double angle, double u, double mass, double g){
        //updating magnitudes 
        fg.magnitude = mass*g;
        fgPerp.magnitude = mass*g*Math.cos(angle);
        fgPar.magnitude = mass*g*Math.sin(angle);
        fn.magnitude = fgPerp.magnitude;
        ff.magnitude = u*fn.magnitude;
        fnet.magnitude = Math.abs(fgPar.magnitude - ff.magnitude);
        
        //updating angles and setting Fnet output text
        fgPerp.theta = fg.theta - angle;
        fn.theta = Math.PI/2 - angle;
        ff.theta = Math.PI - angle;
        fgPar.theta = 2*Math.PI-angle;
        
        //if friction magnitude is bigger than parallel gravity force magnitude
        //set the angle of fnet to ff and output direction
        if (ff.magnitude > fgPar.magnitude) {
            fnet.theta = ff.theta;
            fnetOutput.setText(df.format(fnet.magnitude) + "N [Direction of friction]");
        }
        
        //if friction magnitude is smaller than parallel gravity force magnitude
        //set the angle of fnet to fg|| and output direction
        else{
            fnet.theta = fgPar.theta;
            fnetOutput.setText(df.format(fnet.magnitude) + "N [Direction of Fg||]");
        }
        
        //setting forces output texts
        fgOutput.setText(df.format(fg.magnitude) + "N");
        fgPerpOutput.setText(df.format(fgPerp.magnitude) + "N");
        fgParOutput.setText(df.format(fgPar.magnitude) + "N");
        fnOutput.setText(df.format(fn.magnitude) + "N");
        ffOutput.setText(df.format(ff.magnitude) + "N");
        
    }
    
    //method that updates the box position during animation
    public void updateBoxPosition(){
        //will only update if force of friction is smaller than the parallel gravity force 
        if (ff.magnitude < fgPar.magnitude) {
            //finds acceleration, updates velocity and displacement based on seconds passed
            acceleration = grav * Math.sin(r.theta) - r.u * grav * Math.cos(r.theta);
            velocity = acceleration * seconds;
            displacement = (velocity/2)*seconds;
            b.update(scaleToGrid*displacement); //update box position by displacement

            //output acceleration, velocity, displacement
            aOutput.setText(df.format(acceleration) + "m/s^2");
            vOutput.setText(df.format(velocity) + "m/s");
            dOutput.setText(df.format(displacement) + "m");  
        }
        
        else {
            //output acceleration, velocity, and displacement all as 0
            aOutput.setText("0m/s^2");
            vOutput.setText("0m/s");
            dOutput.setText("0m");  
        }
    }

    //runs the inclined plane simulation animation
    public void run(){      
        while( Thread.currentThread() == animator ) {  //This while-condition becomes false when the user clicks the Pause/reset
            if(b.yPos[1] < drawPanel.getHeight()){  //just so the box won't keep going downhill when it reaches the bottom of incline
                sleep(1); 
                //when user pauses then resumes, adds the tracked amount of time and new time 
                endTime = System.currentTimeMillis() - startTime;
                seconds = endTime/1000.0 + trackedTime;
                updateBoxPosition();   
                drawRampAndBox(); 
            }  
        }
    }
    
    //main method of gui
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InclinedPlaneGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InclinedPlaneGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InclinedPlaneGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InclinedPlaneGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            InclinedPlaneGUI ilp = new InclinedPlaneGUI();
            public void run() {
                ilp.setVisible(true);
                ilp.drawRampAndBox();
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aOutput;
    private javax.swing.JLabel accelerationLabel;
    private javax.swing.JTextField angleInput;
    private javax.swing.JLabel angleLabel;
    private javax.swing.JSlider angleSlider;
    private javax.swing.JRadioButton clearForcesButton;
    private javax.swing.JLabel dOutput;
    private javax.swing.JLabel displacementLabel;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JRadioButton fbdButton;
    private javax.swing.JLabel ffOutput;
    private javax.swing.JLabel fgOutput;
    private javax.swing.JLabel fgParOutput;
    private javax.swing.JLabel fgPerpOutput;
    private javax.swing.JLabel fnOutput;
    private javax.swing.JRadioButton fnetButton;
    private javax.swing.JLabel fnetOutput;
    private javax.swing.ButtonGroup forceButtons;
    private javax.swing.JPanel forcePanel;
    private javax.swing.JTextField gInput;
    private javax.swing.JLabel gLabel;
    private javax.swing.JSlider gSlider;
    private javax.swing.JTabbedPane infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField lengthInput;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JSlider lengthSlider;
    private javax.swing.JTextField mInput;
    private javax.swing.JLabel mLabel;
    private javax.swing.JSlider mSlider;
    private javax.swing.JPanel motionPanel;
    private javax.swing.JButton pauseButton;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JTextField uInput;
    private javax.swing.JLabel uLabel;
    private javax.swing.JSlider uSlider;
    private javax.swing.JLabel vOutput;
    private javax.swing.JLabel velocityLabel;
    // End of variables declaration//GEN-END:variables
}
